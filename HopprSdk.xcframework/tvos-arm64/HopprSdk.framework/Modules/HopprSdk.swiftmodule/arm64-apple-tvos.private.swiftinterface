// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-tvos16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name HopprSdk
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import Combine
import CommonCrypto
import CoreData
import CryptoKit
import Foundation
import HopprEngine
import Network
import OMSDK_Static_Hopprau
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers public class Hoppr {
  public static let shared: HopprSdk.Hoppr
  public func initialize(application: UIKit.UIApplication, appKey: Swift.String, hostUserId: Swift.String? = nil, metadata: [Swift.String : Any] = [:])
  public func initialize(application: UIKit.UIApplication, appKey: Swift.String, hostUserId: Swift.String? = nil, metadata: Swift.String)
  public func trigger(triggerName: Swift.String, params: [Swift.String : Any] = [:], viewController: UIKit.UIViewController?, callback: @escaping () -> Swift.Void = {})
  @objc deinit
}
extension Swift.String : @retroactive Swift.Error {
}
@_hasMissingDesignatedInitializers public class Logger {
  public enum Level : Swift.Int, Swift.Comparable {
    case none
    case debug
    case info
    case warning
    case error
    case critical
    public static func < (lhs: HopprSdk.Logger.Level, rhs: HopprSdk.Logger.Level) -> Swift.Bool
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func setGlobalLogLevel(_ level: HopprSdk.Logger.Level)
  @objc deinit
}
public enum HopprTriggerID : Swift.String {
  case onScreenEnter
  case onScreenExit
  case onElementClicked
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppLifecycleEventType : Swift.String {
  case onAppCreated
  case onAppDestroyed
  case onAppPaused
  case onAppResumed
  case onAppStarted
  case onAppStopped
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension HopprSdk.Logger.Level : Swift.Hashable {}
extension HopprSdk.Logger.Level : Swift.RawRepresentable {}
extension HopprSdk.HopprTriggerID : Swift.Equatable {}
extension HopprSdk.HopprTriggerID : Swift.Hashable {}
extension HopprSdk.HopprTriggerID : Swift.RawRepresentable {}
extension HopprSdk.AppLifecycleEventType : Swift.Equatable {}
extension HopprSdk.AppLifecycleEventType : Swift.Hashable {}
extension HopprSdk.AppLifecycleEventType : Swift.RawRepresentable {}
